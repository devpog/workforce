{
    "contents" : "observeEvent(input$project_new_go, {\n  client <- project_new_name()\n  phase <- project_new_phase()\n  start_date <- project_new_start_date()\n  end_date <- project_new_end_date()\n  active <- tolower(project_new_active())\n  \n  project_count <- c(\n    project_business_architect(),\n    project_technical_architect(),\n    project_project_lead(),\n    project_implementation_engineer(),\n    project_support_engineer()\n  )\n  project_dedication <- c(\n    project_business_architect_dedication(),\n    project_technical_architect_dedication(),\n    project_project_lead_dedication(),\n    project_implementation_engineer_dedication(),\n    project_support_engineer_dedication()\n  )\n  project_resource <- list(\n    ba =  project_business_architect_resource(),\n    ta = project_technical_architect_resource(),\n    pl = project_project_lead_resource(),\n    ie = project_implementation_engineer_resource(),\n    se = project_support_engineer_resource()\n  )\n\n  num_rows <- 5\n  df <- list(\n    client = rep(client, num_rows),\n    phase = rep(phase, num_rows),\n    role = global_roles,\n    start_date = rep(start_date, num_rows),\n    end_date = rep(end_date, num_rows),\n    active = rep(active, num_rows),\n    count = project_count, \n    dedication = project_dedication,\n    resource = project_resource\n  )\n  \n  for(i in 1:num_rows){\n    client <- df$client[[i]]\n    phase <- df$phase[[i]]\n    role <- df$role[[i]]\n    start_date <- df$start_date[[i]]\n    end_date <- df$end_date[[i]]\n    active <- df$active[[i]]\n    count <- df$count[[i]]\n    dedication <- df$dedication[[i]]\n    resource <- df$resource[[i]]\n    \n    db_insert_row_project(db_host, db_port, db_keyspace, client, phase, start_date, end_date, active)\n    db_insert_row_pr_role(db_host, db_port, db_keyspace, client, phase, role, count)\n    db_insert_row_pr_dedication(db_host, db_port, db_keyspace, client, phase, role, dedication)\n    if(length(resource) > 1){\n      for(res in resource)\n        db_insert_row_pr_resource(db_host, db_port, db_keyspace, client, phase, res, role)\n    } else {\n      db_insert_row_pr_resource(db_host, db_port, db_keyspace, client, phase, resource, role)\n    }\n  }\n  \n#   \n#   data <- db_read_table_project(db_host, db_port, db_keyspace, project_hub())\n#   updateSelectInput(session, \"project_new_hub\", label = NULL, choices = data[, \"hub\"])\n#   updateTextInput(session, \"project_new_name\", label = NULL, value = \"\") \n})\n\nobserveEvent(input$project_change_go, {\n  data <- db_read_table_table(db_host, db_port, db_keyspace, project_hub())\n  choices <- sort(data[, \"hub\"])\n  \n  updateSelectInput(session, \"project_change_hub\", label = NULL, choices = choices)\n  updateTextInput(session, \"project_change_name\", label = NULL, value = NULL)\n})\n\nobserveEvent(input$project_del_go, {\n#   db_delete_row_project(db_host, db_port, db_keyspace, project_del_name(), project_hub())\n#   data <- db_read_table_project(db_host, db_port, db_keyspace, project_hub())\n#   updateCheckboxGroupInput(session, \"project_del_name\", label = NULL, choices = data[, \"project\"])\n  \n})\n\nproject_data_del <- eventReactive(input$project_del_go, {\n  db_read_table(db_host, db_port, db_keyspace, 'project')\n})\n\nproject_show_hubs <- eventReactive(eventExpr = input$project_action == 'Edit', {\n  print(\"TRUE===\")\n})",
    "created" : 1467298733608.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1554631884",
    "id" : "B5B65342",
    "lastKnownWriteTime" : 1467298833,
    "path" : "~/Documents/workforce/external/source/project/event.R",
    "project_path" : "external/source/project/event.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}