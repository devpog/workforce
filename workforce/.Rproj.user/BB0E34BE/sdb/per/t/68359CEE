{
    "contents" : "output$project_resource <- renderUI({\n  data <- db_project_get_resources(db_host, db_port, db_keyspace)\n  choices <- append(sort(unique(with(data, paste(last_name, first_name, sep = \", \")))), \"None\")\n  selectInput(\"project_resource\", label = NULL, choices = choices)\n})\n\noutput$project_client <- renderUI({\n  choices <- db_project_get_clients(db_host, db_port, db_keyspace, hub = project_hub())[, \"client\"]\n  selectInput(\"project_client\", label = NULL, choices = choices)\n})\n\noutput$project_hub <- renderUI({\n  choices <- db_read_table(db_host, db_port, db_keyspace, 'hub')[, \"hub\"]\n  selectInput(\"project_hub\", label = NULL, choices = sort(choices))\n})\n\noutput$project_details <- DT::renderDataTable({\n  clients <- db_get_active_projects(db_host, db_port, db_keyspace) %>% select(client, phase) %>% arrange(client)\n\n  df <- apply(clients[, c(\"client\", \"phase\")], 1, function(x){\n    client <- str_trim(x[1], \"both\")\n    phase <- str_trim(x[2], \"both\")\n    return(db_get_project_details(db_host, db_port, db_keyspace, client, phase))\n  })\n  df <- do.call(rbind, df)\n  \n  if(!project_show_all_hubs()){\n    df <- filter(df, hub_client == project_hub())\n  }\n  \n  if(!project_show_all_clients()){\n    df <- filter(df, client == project_client())\n  }\n  \n  if(!project_show_all_phases()){\n    df <- filter(df, phase == project_phase())\n  }\n  \n  df[, \"full_name\"] <- gsub(\"^(None)\\\\s+(None)$\", \"\\\\1\", df[, \"full_name\"])\n\n  if(!project_show_all_resources()){\n    if(project_resource() != \"None\"){\n      full_name <- unlist(str_split(project_resource(), \", \"))\n      full_name2 <- paste(rev(full_name), collapse = \" \")\n      print(full_name2)\n\n      df <- filter(df, full_name == full_name2)\n    } else {\n      df <- filter(df, full_name == \"None\")\n    }\n  }\n  \n  if(project_show_all_active()){\n    df <- filter(df, active == 'true')\n  }\n  \n  if(project_show_all_completed()){\n    df <- filter(df, completed == 'true')\n  }\n  \n  df <- df[!(names(df) %in% c(\"system_name\"))]\n  \n  \n  DT::datatable(\n    df,\n    colnames = gsub(\"(^|[[:space:]])([[:alpha:]])\", \"\\\\1\\\\U\\\\2\", gsub(\"_\", \" \", names(df)), perl=TRUE),\n    rownames = F,\n    extensions = 'Buttons', option = list(\n    dom = 'Bfrtip',\n    buttons = c('copy', 'csv', 'excel', 'pdf', 'print')\n  ))\n})\n\noutput$project_table <- renderDataTable({\n  if(project_show_all_hubs()){\n    DT::datatable(as.data.frame(project_data())[, c(\"client\", \"start_date\", \"end_date\", \"phase\", \"active\", \"completed\")], \n                  colnames = c(\"Client\", \"Start Date\", \"End Date\", \"Phase\", \"Active\", \"Completed\"),\n                  rownames = F)\n  } else {\n    DT::datatable(as.data.frame(project_data_by_hub())[, c(\"client\", \"start_date\", \"end_date\", \"phase\", \"active\", \"completed\")], \n                  colnames = c(\"Client\", \"Start Date\", \"End Date\", \"Phase\", \"Active\", \"Completed\"),\n                  rownames = F)\n    \n  }\n})\n\noutput$project_del_name <- renderUI({\n  choices <- project_data_by_hub()[, \"client\"]\n  checkboxGroupInput(\"project_del_name\", label = NULL,\n                     choices = sort(choices)\n  )\n})\n\noutput$project_edit_name <- renderUI({\n  choices <- project_data_by_hub()[, \"client\"]\n  selectInput(\"project_edit_name\", label = NULL,\n              choices = sort(choices)\n  )\n})\n\noutput$project_edit_box <- renderUI({\n  label <- project_edit_go_label()\n  \n  if(project_action() == 'Edit'){\n    if(project_edit_go_label() == 'Add'){\n      hub <- project_hub()\n      clients <- sort(db_read_table_client(db_host, db_port, db_keyspace, hub)[, \"client\"])\n      \n      box(title = paste0(label, \" new project: \"), collapsible = T, collapsed = F, width = 9, status = \"primary\",\n          column(6, selectInput(\"project_new_name\", label = \"Select client: \", choices = clients, selected = NULL)),\n          column(6, selectInput(\"project_new_phase\", label = \"Select phase: \", choices = project_phases, selected = NULL)),\n          column(6, dateInput(\"project_new_start_date\", label = \"Start date: \", value = Sys.Date())),\n          column(6, dateInput(\"project_new_end_date\", label = \"End date: \", value = NULL)),\n          column(6, checkboxInput(\"project_new_active\", label = \"Currently active?\", value = F))\n      )\n    } else if(project_edit_go_label() == 'Edit'){\n      phase <- db_project_get_phase(db_host, db_port, db_keyspace, project_edit_name())\n      start_date <- db_project_get_start_date(db_host, db_port, db_keyspace, project_edit_name(), phase)\n      end_date <- db_project_get_end_date(db_host, db_port, db_keyspace, project_edit_name(), phase)\n      active <- db_project_get_active(db_host, db_port, db_keyspace, project_edit_name())\n      \n      box(title = paste0(label, \" existing project: \"), collapsible = T, collapsed = F, width = 9, status = \"primary\",\n          column(6, selectInput(\"project_change_name\", label = \"Select client: \", choices = project_edit_name())),\n          column(6, selectInput(\"project_change_phase\", label = \"Select phase: \", choices = project_phases, selected = phase)),\n          column(6, dateInput(\"project_change_start_date\", label = \"Start date: \", value = start_date)),\n          column(6, dateInput(\"project_change_end_date\", label = \"End date: \", value = end_date)),\n          column(6, checkboxInput(\"project_change_active\", label = \"Currently active?\", value = active))\n      )\n    }\n  } else {\n    \n  }\n})\n\noutput$project_edit_roles <- renderUI({\n  label <- project_edit_go_label()\n  roles <- role_show_roles()\n  if(project_action() == 'Edit'){\n    if(project_edit_go_label() == 'Add'){\n      box(title = paste0(label, \" roles: \"), collapsible = T, collapsed = F, width = 3, status = \"primary\",\n          numericInput(\"project_partnerships_lead\", label = \"Partnerships Lead\", min = 0, value = 0),\n          numericInput(\"project_business_architect\", label = \"Business Architect\", min = 0, value = 0),\n          numericInput(\"project_technical_architect\", label = \"Technical Architect\", min = 0, value = 0),\n          numericInput(\"project_project_lead\", label = \"Project Lead\", min = 0, value = 0),\n          numericInput(\"project_implementation_engineer\", label = \"Implementation Engineer\", min = 0, value = 0),\n          numericInput(\"project_support_engineer\", label = \"Support Engineer\", min = 0, value = 0)\n      )\n    } else if(project_edit_go_label() == 'Edit'){\n      all_roles <- db_project_get_role(db_host, db_port, db_keyspace, project_edit_name())\n      box(title = paste0(label, \" roles: \"), collapsible = T, collapsed = F, width = 3, status = \"primary\",\n          numericInput(\"project_change_partnerships_lead\", label = \"Partnerships Lead\", min = 0, \n                       value = filter(all_roles, role == global_roles[1])[, \"count\"]),\n          numericInput(\"project_change_business_architect\", label = \"Business Architect\", min = 0, \n                       value = filter(all_roles, role == global_roles[2])[, \"count\"]),\n          numericInput(\"project_change_technical_architect\", label = \"Technical Architect\", min = 0, \n                       value = filter(all_roles, role == global_roles[3])[, \"count\"]),\n          numericInput(\"project_change_project_lead\", label = \"Project Lead\", min = 0, \n                       value = filter(all_roles, role == global_roles[4])[, \"count\"]),\n          numericInput(\"project_change_implementation_engineer\", label = \"Implementation Engineer\", min = 0, \n                       value = filter(all_roles, role == global_roles[5])[, \"count\"]),\n          numericInput(\"project_change_support_engineer\", label = \"Support Engineer\", min = 0, \n                       value = filter(all_roles, role == global_roles[6])[, \"count\"])\n      )\n    }\n  } else {\n    \n  }\n})\n\noutput$project_edit_dedication <- renderUI({\n  label <- project_edit_go_label()\n  roles <- role_show_roles()\n  if(project_action() == 'Edit'){\n    if(project_edit_go_label() == 'Add'){\n      box(title = paste0(label, \" dedication: \"), collapsible = T, collapsed = F, width = 3, status = \"primary\",\n          numericInput(\"project_partnerships_lead_dedication\", label = \"Partnerships Lead, %\", min = 0, max = 100, value = 0),\n          numericInput(\"project_business_architect_dedication\", label = \"Business Architect, %\", min = 0, max = 100, value = 0),\n          numericInput(\"project_technical_architect_dedication\", label = \"Technical Architect, %\", min = 0, max = 100, value = 0),\n          numericInput(\"project_project_lead_dedication\", label = \"Project Lead, %\", min = 0, value = 0),\n          numericInput(\"project_implementation_engineer_dedication\", label = \"Implementation Engineer, %\", min = 0, max = 100, value = 0),\n          numericInput(\"project_support_engineer_dedication\", label = \"Support Engineer, %\", min = 0, max = 100, value = 0)\n      )\n    } else if(project_edit_go_label() == 'Edit'){\n      all_dedications <- db_project_get_dedication(db_host, db_port, db_keyspace, project_edit_name())\n      box(title = paste0(label, \" dedication: \"), collapsible = T, collapsed = F, width = 3, status = \"primary\",\n          numericInput(\"project_change_partnerships_lead_dedication\", label = \"Partnerships Lead, %\", min = 0, max = 100, \n                       value = filter(all_dedications, role == global_roles[1])[, \"dedication\"]),\n          numericInput(\"project_change_business_architect_dedication\", label = \"Business Architect, %\", min = 0, max = 100, \n                       value = filter(all_dedications, role == global_roles[2])[, \"dedication\"]),\n          numericInput(\"project_change_technical_architect_dedication\", label = \"Technical Architect, %\", min = 0, max = 100, \n                       value = filter(all_dedications, role == global_roles[3])[, \"dedication\"]),\n          numericInput(\"project_change_project_lead_dedication\", label = \"Project Lead, %\", min = 0, \n                       value = filter(all_dedications, role == global_roles[4])[, \"dedication\"]),\n          numericInput(\"project_change_implementation_engineer_dedication\", label = \"Implementation Engineer, %\", min = 0, max = 100, \n                       value = filter(all_dedications, role == global_roles[5])[, \"dedication\"]),\n          numericInput(\"project_change_support_engineer_dedication\", label = \"Support Engineer, %\", min = 0, max = 100, \n                       value = filter(all_dedications, role == global_roles[6])[, \"dedication\"])\n      )\n    }\n  } else {\n    \n  }\n})\n\noutput$project_edit_resources <- renderUI({\n  label <- project_edit_go_label()\n  \n  if(project_action() == 'Edit'){\n    if(project_edit_go_label() == 'Add'){\n      ps_choices <- append(\"None\", sort(with(db_get_resources(db_host, db_port, db_keyspace, role = 'Partnerships Lead')[, c(\"first_name\", \"last_name\")], \n                                             paste(last_name, first_name, sep = \", \"))))\n      ba_choices <- append(\"None\", sort(with(db_get_resources(db_host, db_port, db_keyspace, role = 'Business Architect')[, c(\"first_name\", \"last_name\")], \n                                             paste(last_name, first_name, sep = \", \"))))\n      ta_choices <- append(\"None\", sort(with(db_get_resources(db_host, db_port, db_keyspace, role = 'Technical Architect')[, c(\"first_name\", \"last_name\")], \n                                             paste(last_name, first_name, sep = \", \"))))\n      pl_choices <- append(\"None\", sort(with(db_get_resources(db_host, db_port, db_keyspace, role = 'Project Lead')[, c(\"first_name\", \"last_name\")], \n                                             paste(last_name, first_name, sep = \", \"))))\n      ie_choices <- append(\"None\", sort(with(db_get_resources(db_host, db_port, db_keyspace, role = 'Implementation Engineer')[, c(\"first_name\", \"last_name\")], \n                                             paste(last_name, first_name, sep = \", \"))))\n      se_choices <- append(\"None\", sort(with(db_get_resources(db_host, db_port, db_keyspace, role = 'Support Engineer')[, c(\"first_name\", \"last_name\")], \n                                             paste(last_name, first_name, sep = \", \"))))\n      box(title = paste0(label, \" resources: \"), collapsible = T, collapsed = F, width = 5, status = \"primary\",\n          checkboxInput(\"project_flexible_resource\", label = \"Flexible resource assignment\", value = F),\n          selectInput(\"project_partnerships_lead_resource\", label = \"Partnerships Lead: \", choices = ps_choices, multiple = T),\n          selectInput(\"project_business_architect_resource\", label = \"Business Architect: \", choices = ba_choices, multiple = T),\n          selectInput(\"project_technical_architect_resource\", label = \"Technical Architect: \", choices = ta_choices, multiple = T),\n          selectInput(\"project_project_lead_resource\", label = \"Project Lead: \", choices = pl_choices, multiple = T),\n          selectInput(\"project_implementation_engineer_resource\", label = \"Implementation Engineer: \", choices = ie_choices, multiple = T),\n          selectInput(\"project_support_engineer_resource\", label = \"Support Engineer: \", choices = se_choices, multiple = T)\n      )\n    } else if(project_edit_go_label() == 'Edit'){\n      ps_choices <- append(\"None\", sort(with(db_get_resources(db_host, db_port, db_keyspace, role = global_roles[1])[, c(\"first_name\", \"last_name\")], \n                                             paste(last_name, first_name, sep = \", \"))))\n      ba_choices <- append(\"None\", sort(with(db_get_resources(db_host, db_port, db_keyspace, role = 'Business Architect')[, c(\"first_name\", \"last_name\")], \n                                             paste(last_name, first_name, sep = \", \"))))\n      ta_choices <- append(\"None\", sort(with(db_get_resources(db_host, db_port, db_keyspace, role = 'Technical Architect')[, c(\"first_name\", \"last_name\")], \n                                             paste(last_name, first_name, sep = \", \"))))\n      pl_choices <- append(\"None\", sort(with(db_get_resources(db_host, db_port, db_keyspace, role = 'Project Lead')[, c(\"first_name\", \"last_name\")], \n                                             paste(last_name, first_name, sep = \", \"))))\n      ie_choices <- append(\"None\", sort(with(db_get_resources(db_host, db_port, db_keyspace, role = 'Implementation Engineer')[, c(\"first_name\", \"last_name\")], \n                                             paste(last_name, first_name, sep = \", \"))))\n      se_choices <- append(\"None\", sort(with(db_get_resources(db_host, db_port, db_keyspace, role = 'Support Engineer')[, c(\"first_name\", \"last_name\")], \n                                             paste(last_name, first_name, sep = \", \"))))\n      \n      all_resources <- db_project_get_resource(db_host, db_port, db_keyspace, project_edit_name()) %>% filter(system_name != \"None\")\n      full_names <- db_project_get_full_name(db_host, db_port, db_keyspace, all_resources[, \"system_name\"])\n      df <- left_join(all_resources, full_names)\n      df[is.na(df) ] <- \"None\"\n      \n      ps_selected <- with(filter(df, role == global_roles[1]), paste(last_name, first_name, sep = \", \"))\n      ba_selected <- with(filter(df, role == global_roles[2]), paste(last_name, first_name, sep = \", \"))\n      ta_selected <- with(filter(df, role == global_roles[3]), paste(last_name, first_name, sep = \", \"))\n      pl_selected <- with(filter(df, role == global_roles[4]), paste(last_name, first_name, sep = \", \"))\n      ie_selected <- with(filter(df, role == global_roles[5]), paste(last_name, first_name, sep = \", \"))\n      se_selected <- with(filter(df, role == global_roles[6]), paste(last_name, first_name, sep = \", \"))\n      \n      box(title = paste0(label, \" resources: \"), collapsible = T, collapsed = F, width = 5, status = \"primary\",\n          checkboxInput(\"project_change_flexible_resource\", label = \"Flexible resource assignment\", value = F),\n          selectInput(\"project_change_partnerships_lead_resource\", label = \"Partnerships Lead: \", multiple = T, \n                      choices = ps_choices,\n                      selected = ifelse(length(ps_selected) > 0, ps_selected, 'None')),\n          selectInput(\"project_change_business_architect_resource\", label = \"Business Architect: \", multiple = T, \n                      choices = ba_choices,\n                      selected = ifelse(length(ba_selected) > 0, ba_selected, 'None')),\n          selectInput(\"project_change_technical_architect_resource\", label = \"Technical Architect: \", multiple = T, \n                      choices = ta_choices,\n                      selected = ifelse(length(ta_selected) > 0, ta_selected, 'None')),\n          selectInput(\"project_change_project_lead_resource\", label = \"Project Lead: \", multiple = T, \n                      choices = pl_choices,\n                      selected = ifelse(length(pl_selected) > 0, pl_selected, 'None')),\n          selectInput(\"project_change_implementation_engineer_resource\", label = \"Implementation Engineer: \", multiple = T, \n                      choices = ie_choices,\n                      selected = ifelse(length(ie_selected) > 0, ie_selected, 'None')),\n          selectInput(\"project_change_support_engineer_resource\", label = \"Support Engineer: \", multiple = T, \n                      choices = se_choices,\n                      selected = ifelse(length(se_selected) > 0, se_selected, 'None'))\n      )\n    }\n  } else {\n    \n  }\n})\n\noutput$project_go <- renderUI({\n  if(project_action() == 'Edit'){\n    if(project_edit_go_label() == 'Add'){\n      box(title = NULL, collapsible = F, collapsed = F, width = 3, status = \"primary\",\n          actionButton(\"project_new_go\", \"Submit\", width = '100%')\n      )\n    } else if(project_edit_go_label() == 'Edit'){\n      box(title = NULL, collapsible = F, collapsed = F, width = 3, status = \"primary\",\n          actionButton(\"project_change_go\", \"Update\", width = '100%')\n      )\n    } else {\n      \n    }\n  } else {\n    \n  }\n})",
    "created" : 1467298729927.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3296578228",
    "id" : "68359CEE",
    "lastKnownWriteTime" : 1467387126,
    "path" : "~/Documents/workforce/external/source/project/io.R",
    "project_path" : "external/source/project/io.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}